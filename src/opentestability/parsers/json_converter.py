"""
JSON converter for parsed netlist files.

This module converts text-based parsed netlists to JSON format
for easier programmatic processing.
"""

import json
import os
import re
import sys
from pathlib import Path

from ..utils.file_utils import get_project_paths


def parse_netlist_txt(txt_path):
    """
    Parse a text-based netlist file and extract components.
    
    Args:
        txt_path: Path to the text netlist file
        
    Returns:
        Dictionary containing parsed netlist data
    """
    gates = []
    primary_inputs = []
    primary_outputs = []

    with open(txt_path, 'r') as f:
        for line in f:
            line = line.strip()

            if not line or line.startswith('#'):
                continue

            # Capture primary inputs
            if line.startswith('INPUT'):
                primary_inputs.extend(line.replace('INPUT', '').strip().split())
                continue

            # Capture primary outputs
            if line.startswith('OUTPUT'):
                primary_outputs.extend(line.replace('OUTPUT', '').strip().split())
                continue

            # Match gates
            match = re.match(r'(\w+)\s+out\((\S+)\)\s+in\((.*?)\)', line)
            if match:
                gate_type = match.group(1)
                output = match.group(2)
                inputs = match.group(3).split()

                gates.append({
                    "type": gate_type,
                    "output": output,
                    "inputs": inputs
                })

    return {
        "primary_inputs": primary_inputs,
        "primary_outputs": primary_outputs,
        "gates": gates
    }


def convert_txt_to_json(input_filename):
    """
    Convert a parsed text netlist to JSON format.
    
    Args:
        input_filename: Name of the text file in data/parsed/
        
    Returns:
        Path to the generated JSON file
    """
    paths = get_project_paths()
    
    if not input_filename.endswith('.txt'):
        raise ValueError("Input file must have a .txt extension.")
    
    input_path = paths['parsed'] / input_filename
    
    if not input_path.exists():
        raise FileNotFoundError(f"File not found: {input_path}")
    
    output_filename = input_filename.replace('.txt', '.json')
    output_path = paths['parsed'] / output_filename
    
    data = parse_netlist_txt(input_path)
    
    with open(output_path, 'w') as f:
        json.dump(data, f, indent=4)
    
    print(f"[+] Converted '{input_filename}' to JSON: '{output_filename}'")
    return str(output_path)


def main():
    """CLI entry point for the JSON converter."""
    if len(sys.argv) != 2:
        print("Usage: python3 json_converter.py <filename.txt>")
        return

    input_name = sys.argv[1]
    
    try:
        convert_txt_to_json(input_name)
    except (ValueError, FileNotFoundError) as e:
        print(f"[!] Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()