"""
DAG (Directed Acyclic Graph) builder for netlist analysis.

This module constructs DAG representations from parsed netlists
for reconvergent fanout analysis and visualization.
"""

import json
import os
import sys
import re
from pathlib import Path

from ..utils.file_utils import get_project_paths, ensure_directory


def load_parsed_netlist(json_filename):
    """
    Load a parsed netlist JSON file.
    
    Args:
        json_filename: Name of JSON file in data/parsed/
        
    Returns:
        Dictionary containing parsed netlist data
        
    Raises:
        FileNotFoundError: If the JSON file doesn't exist
    """
    paths = get_project_paths()
    json_path = paths['parsed'] / json_filename
    
    if not json_path.exists():
        raise FileNotFoundError(f"Parsed netlist not found: {json_path}")
    
    with open(json_path, 'r') as f:
        return json.load(f)


def build_dag(gates):
    """
    Build DAG edges and labels from gate list.
    
    Args:
        gates: List of gate dictionaries from parsed netlist
        
    Returns:
        Tuple of (edges, labels) where:
        - edges: List of [source, target] edge pairs
        - labels: Dictionary mapping nodes to their labels
    """
    edges = []
    labels = {}
    
    for gate in gates:
        gate_type = gate.get('type')
        output = gate.get('output')
        inputs = gate.get('inputs', [])
        
        # Skip UNCONNECTED nets
        if not output or output.startswith('UNCONNECTED'):
            continue
            
        # Label this node
        labels[output] = f"{output} ({gate_type})"
        
        # Build edges from inputs to output
        for inp in inputs:
            edges.append([inp, output])
            if inp not in labels:
                labels[inp] = inp
    
    return edges, labels


def flatten_signal(signal):
    """
    Flatten vector signals like A[7:0] into individual bit signals.
    
    Args:
        signal: Signal name, possibly with vector notation
        
    Returns:
        List of individual signal names
    """
    m = re.match(r'(.+)\[(\d+):(\d+)\]', signal)
    if m:
        name, hi, lo = m.group(1), int(m.group(2)), int(m.group(3))
        step = 1 if hi >= lo else -1
        return [f"{name}[{i}]" for i in range(hi, lo - step, -step)]
    return [signal]


def save_dag_json(dag_data, input_filename):
    """
    Save DAG data to JSON file.
    
    Args:
        dag_data: Dictionary containing DAG edges, labels, and I/O
        input_filename: Original input filename (for naming output)
        
    Returns:
        Path to the saved DAG JSON file
    """
    paths = get_project_paths()
    ensure_directory(paths['dag_output'])
    
    base = Path(input_filename).stem
    output_path = paths['dag_output'] / f"{base}_dag.json"
    
    with open(output_path, 'w') as f:
        json.dump(dag_data, f, indent=2)
    
    print(f"[✓] DAG saved to {output_path}")
    return str(output_path)


def create_dag_from_netlist(json_filename):
    """
    Create a complete DAG from a parsed netlist JSON file.
    
    Args:
        json_filename: Name of the JSON file in data/parsed/
        
    Returns:
        Path to the generated DAG JSON file
    """
    data = load_parsed_netlist(json_filename)
    gates = data.get('gates')
    
    if gates is None:
        raise ValueError("'gates' key not found in parsed netlist")

    edges, labels = build_dag(gates)

    # Handle primary inputs/outputs
    raw_inputs = data.get('primary_inputs', [])
    raw_outputs = data.get('primary_outputs', [])
    
    flat_inputs = []
    for sig in raw_inputs:
        flat_inputs.extend(flatten_signal(sig))
    
    flat_outputs = []
    for sig in raw_outputs:
        flat_outputs.extend(flatten_signal(sig))

    dag_data = {
        'edges': edges,
        'labels': labels,
        'primary_inputs': flat_inputs,
        'primary_outputs': flat_outputs
    }

    return save_dag_json(dag_data, json_filename)


def main():
    """CLI entry point for DAG builder."""
    if len(sys.argv) != 2:
        print("Usage: python3 dag_builder.py <design>.json")
        sys.exit(1)
    
    json_file = sys.argv[1]
    
    try:
        output_path = create_dag_from_netlist(json_file)
        print(f"[✓] DAG creation completed: {output_path}")
    except (FileNotFoundError, ValueError) as e:
        print(f"[ERROR] {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()