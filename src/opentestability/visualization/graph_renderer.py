"""
Graph visualization and rendering using Graphviz.

This module provides visualization capabilities for DAG structures
generated from netlist analysis.
"""

import json
import os
import sys
import pygraphviz as pgv
from pathlib import Path

from ..utils.file_utils import get_project_paths, ensure_directory


def load_dag(dag_filename):
    """
    Load DAG data from JSON file.
    
    Args:
        dag_filename: Name of DAG JSON file in data/dag_output/
        
    Returns:
        Tuple of (edges, labels, primary_inputs, primary_outputs)
        
    Raises:
        FileNotFoundError: If DAG file doesn't exist
    """
    paths = get_project_paths()
    json_path = paths['dag_output'] / dag_filename
    
    if not json_path.exists():
        raise FileNotFoundError(f"DAG file not found: {json_path}")
    
    with open(json_path, 'r') as f:
        data = json.load(f)

    edges = data['edges']
    labels = data['labels']
    primary_inputs = data.get("flattened_primary_inputs", data.get("primary_inputs", []))
    primary_outputs = data.get("flattened_primary_outputs", data.get("primary_outputs", []))

    return edges, labels, primary_inputs, primary_outputs


def format_gate_label(label):
    """
    Format gate labels for better visualization.
    
    Args:
        label: Raw label string from DAG
        
    Returns:
        Formatted label string
    """
    try:
        parts = label.split()
        gate_type = parts[0]
        out_net = parts[1].split('(')[1][:-1]
        in_nets = parts[2].split('(')[1][:-1].split()
        return f"{gate_type}({', '.join(in_nets)}) → {out_net}"
    except:
        return label


def create_graph_visualization(edges, labels, primary_inputs, primary_outputs):
    """
    Create a Graphviz visualization from DAG components.
    
    Args:
        edges: List of [source, target] edge pairs
        labels: Dictionary mapping nodes to labels
        primary_inputs: List of primary input nodes
        primary_outputs: List of primary output nodes
        
    Returns:
        pygraphviz.AGraph object ready for rendering
    """
    G = pgv.AGraph(strict=False, directed=True)
    G.graph_attr.update(rankdir="LR", splines="true", nodesep="0.5", ranksep="1")

    # Add nodes with appropriate styling
    for node, raw_label in labels.items():
        label = format_gate_label(raw_label)
        
        if node in primary_inputs:
            G.add_node(node, label=node, shape="box", style="filled", fillcolor="#aec7e8")
        elif node in primary_outputs:
            G.add_node(node, label=node, shape="box", style="filled", fillcolor="#98df8a")
        elif '(' in label:
            G.add_node(node, label=label, shape="ellipse", style="filled", fillcolor="#ffbb78")
        else:
            G.add_node(node, label=label, shape="ellipse", style="filled", fillcolor="#d3d3d3")

    # Add edges
    for u, v in edges:
        G.add_edge(u, v)

    return G


def visualize_gate_graph(dag_filename, output_filename=None):
    """
    Create and save a graph visualization from a DAG JSON file.
    
    Args:
        dag_filename: Name of DAG JSON file in data/dag_output/
        output_filename: Optional custom output filename
        
    Returns:
        Path to the generated PNG file
    """
    paths = get_project_paths()
    ensure_directory(paths['graphs'])

    edges, labels, primary_inputs, primary_outputs = load_dag(dag_filename)
    G = create_graph_visualization(edges, labels, primary_inputs, primary_outputs)

    if output_filename is None:
        png_name = Path(dag_filename).stem + "_graph.png"
    else:
        png_name = output_filename

    output_path = paths['graphs'] / png_name

    G.layout(prog="dot")
    G.draw(str(output_path))
    
    print(f"[✓] Graph visualization saved to {output_path}")
    return str(output_path)


def render_graph_with_custom_style(dag_filename, style_config=None):
    """
    Render graph with custom styling options.
    
    Args:
        dag_filename: Name of DAG JSON file
        style_config: Dictionary with custom style settings
        
    Returns:
        Path to the generated visualization
    """
    if style_config is None:
        style_config = {
            'input_color': '#aec7e8',
            'output_color': '#98df8a', 
            'gate_color': '#ffbb78',
            'wire_color': '#d3d3d3',
            'layout': 'dot'
        }
    
    paths = get_project_paths()
    edges, labels, primary_inputs, primary_outputs = load_dag(dag_filename)
    
    G = pgv.AGraph(strict=False, directed=True)
    G.graph_attr.update(
        rankdir="LR", 
        splines="true", 
        nodesep="0.5", 
        ranksep="1"
    )

    for node, raw_label in labels.items():
        label = format_gate_label(raw_label)
        
        if node in primary_inputs:
            G.add_node(node, label=node, shape="box", style="filled", 
                      fillcolor=style_config['input_color'])
        elif node in primary_outputs:
            G.add_node(node, label=node, shape="box", style="filled", 
                      fillcolor=style_config['output_color'])
        elif '(' in label:
            G.add_node(node, label=label, shape="ellipse", style="filled", 
                      fillcolor=style_config['gate_color'])
        else:
            G.add_node(node, label=label, shape="ellipse", style="filled", 
                      fillcolor=style_config['wire_color'])

    for u, v in edges:
        G.add_edge(u, v)

    png_name = Path(dag_filename).stem + "_custom_graph.png"
    output_path = paths['graphs'] / png_name

    G.layout(prog=style_config['layout'])
    G.draw(str(output_path))
    
    print(f"[✓] Custom styled graph saved to {output_path}")
    return str(output_path)


def main():
    """CLI entry point for graph visualization."""
    if len(sys.argv) != 2:
        print("Usage: python3 graph_renderer.py <dag_filename.json>")
        sys.exit(1)
    
    dag_filename = sys.argv[1]
    
    try:
        output_path = visualize_gate_graph(dag_filename)
        print(f"[✓] Visualization completed: {output_path}")
    except FileNotFoundError as e:
        print(f"[✗] Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()